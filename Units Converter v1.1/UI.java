
/**
 * The user interface for the Units Converter.
 * The user interface is used to input the measurement amount, the units of said
 * amount, and the units to convert to. The user can convert between two 
 * imperial units, two metric units, from imperial to metric units, from 
 * metric to imperial units, and between temperature units.
 * A convert button performs the conversion. The converted measurement is then 
 * displayed. An error message can be displayed if the user tries to convert a 
 * negative length, mass, or volume; if the user tries to convert one type of 
 * unit to another (like from meters to liters); or if the user inputs a unit 
 * incorrectly (units must be spelled out, abbreviations are not allowed). 
 * A clear button clears the text fields and an exit button closes the program.
 * @author Carey Norslien
 */
public class UI extends javax.swing.JFrame {
   private static final int FAH = 1;
   private static final int CEL = 2;
   private static final int KEL = 3;
   
   /**
    * Creates new form UI
    */
   public UI() {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      clearButton = new javax.swing.JButton();
      exitButton = new javax.swing.JButton();
      origAmtField = new javax.swing.JTextField();
      convUnitField = new javax.swing.JTextField();
      convAmtField = new javax.swing.JTextField();
      convertButton = new javax.swing.JButton();
      convertFromLB = new javax.swing.JLabel();
      convertToLB = new javax.swing.JLabel();
      titleLB = new javax.swing.JLabel();
      answerLB = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      clearButton.setText("Clear");
      clearButton.setToolTipText("");
      clearButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearButtonActionPerformed(evt);
         }
      });

      exitButton.setText("Exit");
      exitButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            exitButtonActionPerformed(evt);
         }
      });

      origAmtField.setToolTipText("<html>\n<p>Enter the length, mass, or volume measurement you want to convert. </p>\n<p></p>\n<p>For example:</p>\n<p>25 meters</p>\n<p>678.9 kg</p>\n<p>24.0654 ml</p>\n<p>26 Cl</p>\n<p></p>\n<p>Negative amounts are not allowed.</p>\n");
      origAmtField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            origAmtFieldActionPerformed(evt);
         }
      });

      convUnitField.setToolTipText("<html>\n<p>Enter the measurement units you want to convert to from the amount entered in the previous text box. </p>\n<p></p>\n<p>For example:</p>\n<p>inches</p>\n<p>mg</p>\n<p>l</p>\n<p>Fahrenheit</p>\n<p></p>\n<p>You must spell out the units. You cannot use abbreviations.</p>");
      convUnitField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            convUnitFieldActionPerformed(evt);
         }
      });

      convAmtField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            convAmtFieldActionPerformed(evt);
         }
      });

      convertButton.setText("Convert");
      convertButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            convertButtonActionPerformed(evt);
         }
      });

      convertFromLB.setText("Measurement to convert:");

      convertToLB.setText("Units to convert to:");

      titleLB.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
      titleLB.setText("Units Converter");

      answerLB.setText("Converted Measurement");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(origAmtField, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(convertFromLB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(convertToLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(convUnitField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(titleLB))
                     .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(convAmtField, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addGap(0, 0, Short.MAX_VALUE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addGap(0, 0, Short.MAX_VALUE)
                  .addComponent(convertButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(clearButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(exitButton)))
            .addContainerGap())
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(answerLB)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(titleLB)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(convertFromLB)
               .addComponent(convertToLB))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(origAmtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(convUnitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(answerLB)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(convAmtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(exitButton)
               .addComponent(clearButton)
               .addComponent(convertButton))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void convAmtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convAmtFieldActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_convAmtFieldActionPerformed

   /**
    * Clears all text fields when the clear button is clicked on.
    * @param evt the clear button is clicked on
    */
   private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
      origAmtField.setText(null);
      convUnitField.setText(null);
      convAmtField.setText(null);
   }//GEN-LAST:event_clearButtonActionPerformed

   /**
    * Converts the measurement when the convert button is clicked on.
    * @param evt the convert button is clicked on
    */
   private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
      String finalAnswer = null;      
      String origInput = origAmtField.getText();
      String convInput = convUnitField.getText();
      Converter convert = new Converter();
      convert.processOrigAmt(origInput);
      convert.processConvUnits(convInput);
     
      if (convert.origTempUnit() == FAH && convert.convTempUnit() == CEL) 
         finalAnswer = convert.convertedFahCel(0);
      else if (convert.origTempUnit() == CEL && convert.convTempUnit() == FAH) 
         finalAnswer = convert.convertedFahCel(1);
      else if (convert.origTempUnit() == FAH && convert.convTempUnit() == KEL) 
         finalAnswer = convert.convertedFahKel(0);
      else if (convert.origTempUnit() == KEL && convert.convTempUnit() == FAH) 
         finalAnswer = convert.convertedFahKel(1);
      else if (convert.origTempUnit() == CEL && convert.convTempUnit() == KEL)
         finalAnswer = convert.convertedCelKel(0);
      else if (convert.origTempUnit() == KEL && convert.convTempUnit() == CEL)
         finalAnswer = convert.convertedCelKel(1);
      else if (convert.isOrigImperial() && convert.isConvImperial())
         finalAnswer = convert.convertedImpToImp();
      else if (convert.isOrigImperial() && !convert.isConvImperial())
         finalAnswer = convert.convertedImpToMet();
      else if (!convert.isOrigImperial() && convert.isConvImperial())
         finalAnswer = convert.convertedMetToImp();
      else if(!convert.isOrigImperial() && !convert.isConvImperial())
         finalAnswer = convert.convertedMetToMet();
      
      convAmtField.setText(finalAnswer);
   }//GEN-LAST:event_convertButtonActionPerformed

   /**
    * Exits the program when the exit button is clicked on.
    * @param evt  the exit button is clicked on
    */
   private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
      System.exit(0);
   }//GEN-LAST:event_exitButtonActionPerformed

   private void origAmtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_origAmtFieldActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_origAmtFieldActionPerformed

   private void convUnitFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convUnitFieldActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_convUnitFieldActionPerformed
   
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new UI().setVisible(true);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel answerLB;
   private javax.swing.JButton clearButton;
   private javax.swing.JTextField convAmtField;
   private javax.swing.JTextField convUnitField;
   private javax.swing.JButton convertButton;
   private javax.swing.JLabel convertFromLB;
   private javax.swing.JLabel convertToLB;
   private javax.swing.JButton exitButton;
   private javax.swing.JTextField origAmtField;
   private javax.swing.JLabel titleLB;
   // End of variables declaration//GEN-END:variables
}
