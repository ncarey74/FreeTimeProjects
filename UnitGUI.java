/**
 * The interface for the Metric to Imperial Unit Converter.
 * The user inputs an amount and its metric units. This data is then sent to
 * a Converter object that will convert the amount and the units to the imperial
 * system.
 * @author Carey Norslien
 */
public class UnitGUI extends javax.swing.JFrame 
{
   /**
    * Creates a Converter object.
    */
   private Converter converter = new Converter();
   
   /**
    * Creates new form UnitGUI
    */
   public UnitGUI() {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      Title = new javax.swing.JLabel();
      EnterAmount = new javax.swing.JLabel();
      ConvertedAmount = new javax.swing.JLabel();
      AmountField = new javax.swing.JTextField();
      UnitSelect = new javax.swing.JComboBox();
      ConvertedAmountField = new javax.swing.JTextField();
      Convert = new javax.swing.JButton();
      Exit = new javax.swing.JButton();
      Clear = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setPreferredSize(new java.awt.Dimension(375, 250));
      setResizable(false);

      Title.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
      Title.setText("Metric to Imperial Unit Converter");

      EnterAmount.setText("Enter an amount:");

      ConvertedAmount.setText("The converted amount is:");

      AmountField.setText(" ");
      AmountField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            AmountFieldActionPerformed(evt);
         }
      });

      UnitSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "celsius", "kilograms", "kilometers", "liters" }));
      UnitSelect.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            UnitSelectActionPerformed(evt);
         }
      });

      ConvertedAmountField.setText(" ");
      ConvertedAmountField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ConvertedAmountFieldActionPerformed(evt);
         }
      });

      Convert.setText("Convert");
      Convert.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ConvertActionPerformed(evt);
         }
      });

      Exit.setText("Exit");
      Exit.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ExitActionPerformed(evt);
         }
      });

      Clear.setText("Clear");
      Clear.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ClearActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(EnterAmount)
                     .addComponent(ConvertedAmount)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(AmountField, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(UnitSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Convert))
                     .addComponent(ConvertedAmountField)))
               .addGroup(layout.createSequentialGroup()
                  .addGap(58, 58, 58)
                  .addComponent(Title))
               .addGroup(layout.createSequentialGroup()
                  .addGap(114, 114, 114)
                  .addComponent(Clear)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(Exit)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addComponent(Title)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(EnterAmount)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(AmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(UnitSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(Convert))
            .addGap(18, 18, 18)
            .addComponent(ConvertedAmount)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(ConvertedAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(Exit)
               .addComponent(Clear))
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void AmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmountFieldActionPerformed
      //not supported
   }//GEN-LAST:event_AmountFieldActionPerformed

   private void ConvertedAmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertedAmountFieldActionPerformed
      //not supported
   }//GEN-LAST:event_ConvertedAmountFieldActionPerformed

   /**
    * Converts the metric measurements to imperial.
    * Takes the amount given in the text field and the units selected from the
    * combo box and converts the measurement it according to the type of unit.
    * @param evt convert button pressed.
    */
   private void ConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertActionPerformed
      double amount = (Float.parseFloat(AmountField.getText()));
      String units = (String)UnitSelect.getSelectedItem();
      double converted = Converter.convertAmount(amount, units);
      if (converted == -1) //negative distance, mass, volume
         ConvertedAmountField.setText("Negative distances, masses, and volumes" 
                                      + " are not allowed.");
      else //positive distance, mass, volume; positive or negative temperature
      {
         units = Converter.convertUnits(units);
         String answer = String.valueOf(converted) + " " + units; 
         ConvertedAmountField.setText(answer);
      }
   }//GEN-LAST:event_ConvertActionPerformed

   /**
    * Exits the program
    * @param evt exit button pressed
    */
   private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
      System.exit(0);
   }//GEN-LAST:event_ExitActionPerformed

   private void UnitSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnitSelectActionPerformed

   }//GEN-LAST:event_UnitSelectActionPerformed

   /**
    * Clears the text fields.
    * @param evt clear button pressed 
    */
   private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
      AmountField.setText(null);
      ConvertedAmountField.setText(null);
   }//GEN-LAST:event_ClearActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(UnitGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(UnitGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(UnitGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(UnitGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
         public void run() {
            new UnitGUI().setVisible(true);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField AmountField;
   private javax.swing.JButton Clear;
   private javax.swing.JButton Convert;
   private javax.swing.JLabel ConvertedAmount;
   private javax.swing.JTextField ConvertedAmountField;
   private javax.swing.JLabel EnterAmount;
   private javax.swing.JButton Exit;
   private javax.swing.JLabel Title;
   private javax.swing.JComboBox UnitSelect;
   // End of variables declaration//GEN-END:variables
}
