FUNCTIONS-------------------------------------------------------------------------------------------------
Primality Test:
input:	list of numbers DS
output:	prime numbers DS
psuedocode
	for int i = 0, i < size, i++		
		for int j = 1, j < element i, j++
			if j % element i = 0 AND element i is not 1
				add element i to prime numbers DS
	return prime numbers DS		

Prime Factorization:
input: 	number
output: prime factors DS**
pseudocode:
	while number % 2 == 0
		store 2 into prime factors DS
		number /= 2
	//number is odd
	for int i = 3; i * i < n, i += 2
		while number % i == 0
			store i
			number /= i
	if number > 2
		store number into prime factors DS
	else
		store 1 into prime factors DS
	return prime factors DS

Greatest Common Divisor
input: 	list of numbers
output: greatest common divisor of list of numbers
pseudocode:
	while there are numbers
		find prime factorization of number
		Compile All Factors List
	//find factors all numbers share
	Find Common Factors
	if factors = 1
		greatest common factor = returned factor 
	else if factors > 1
		greatest common factor = each factor muliplied together
	else
		greatest common factor = 1
	return greatest common factor

Lowest Common Multiple
input:	list of numbers
output:	Lowest Common Multiple
psuedocode:
	retrieve greatest common divisor
	get product of input
	return product of input / greatest common divisor

Compile All Factors List:
input: 	prime factors DS
output: All Factors List DS
pseudocode:
	retrieve common factors DS
	number of columns = index of end of input + 1
	if DS is empty
		add number of columns spots to common factors DS
	else if this input has more columns that last input
		add (this input's columns - last input's columns) spots to end of each "block"
		fill new spots with 0
	else if this input has less columns than last input
		add input to end of common factors DS
		add (last input's columns - this input's columns) spots to end of this "block"
		fill new spots with 0
	else
		add input to end of common factors DS

Find Common Factors:
input: 	All Factors List
output: Common Factors DS
pseudocode:
	for int i = 1; i <= Number of Factors for First Original Number ; i++
		common factor equals i
		//search for common factor in other original numbers
		while there are still original numbers left
			go to first factor of this original number
			//search this original number for the common factor
			while factor <= common factor AND search in this original number not done
				if factor = common factor
					search in this original number done
				else if factor = 0
					go to next factor
				else
					go to next factor
			if search in this original number done
				go to next original number (next iteration of while loop)
			if common factor not found in this original number
				go to next factor in first original number (next iteration of for loop)
		add this common factor to the Common Factors DS

Number of Factors for First Original Number:
input: 	All Factors List
output: number of factors for first original number
pseudocode:
	upper limit = (1 * number of columns of All Factors List)
	lower limit = (0 * number of columns of All Factors List) + 1
	for int i = 0, i < upper limit, i++
		if ( i = 0 )
			number of zeros++
	return upper limit - lower limit - number of zeros

DATA STRUCTURES--------------------------------------------------------------------------------------------
Prime Factors:
- Uses either a dynamically allocated array or a vector.
	+ Need to data structure small, but growable.
	+ Could possibly by fixed if the number with the most factors can be determined withing the data range.
- Index 0 is the original number
- Indices 1 and higher are the factors
	+ Prime factorization algorithm takes care of the order.

All Factors List:
- Uses dynamically allocated array 
- Size is (number of elements of largest Prime Factors DS) * (number of Prime Factors DSs)
- Conceptually a 2D array, implement as 1D array using row major order
	| 18 2 3 3 |
	| 24 2 2 3 |	==> | 18 2 3 3 24 2 2 3 |
- Since Prime Factors DSs can be off different sizes, 0s will be added to keep "shape" of conceptual 2D array

Common Factors:
- dynamically allocated integer array
- Contains only factors, not original numbers

Prime Numbers:
- dynamically allocated integer array
	+ Need to data structure small, but growable.
- contains only prime numbers
- ascending order

NOTES------------------------------------------------------------------------------------------------------
**data structure